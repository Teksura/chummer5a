/*  This file is part of Chummer5a.
 *
 *  Chummer5a is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Chummer5a is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Chummer5a.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  You can obtain the full source code for Chummer5a at
 *  https://github.com/chummer5a/chummer5a
 */

using System;
using System.Xml;
using System.Threading;
using System.Threading.Tasks;
// ReSharper disable StringLiteralTypo

// This file is automatically generated from the T4 template ImprovementMethods.tt
// It is NOT, I repeat NOT, meant to be edited manually.
// If you wish to modify this file, please do so instead by modifying the template and re-running it.

namespace Chummer
{
    public static class ImprovementMethods
    {
        /// <summary>
        /// Gets an AddImprovementCollection function based on its name.
        /// </summary>
        /// <param name="strMethodName">Name of the function, in all uppercase.</param>
        /// <param name="objImprovementAdder">Container for the function (since they're not static, we need a container).</param>
        /// <returns>Function pointer to the named function if one is found. If none are found, returns a null pointer.</returns>
        public static Action<XmlNode> GetMethod(string strMethodName, [Annotations.NotNull] AddImprovementCollection objImprovementAdder)
        {
            if (objImprovementAdder == null)
                throw new ArgumentNullException(nameof(objImprovementAdder));
            // Switch-cases get compiled as hashes, so this is as close as you can get to a compile-time Dictionary
            switch (strMethodName)
            {
                case "SURPRISE":
                    return objImprovementAdder.surprise;
                case "SPELLRESISTANCE":
                    return objImprovementAdder.spellresistance;
                case "MENTALMANIPULATIONRESIST":
                    return objImprovementAdder.mentalmanipulationresist;
                case "PHYSICALMANIPULATIONRESIST":
                    return objImprovementAdder.physicalmanipulationresist;
                case "MANAILLUSIONRESIST":
                    return objImprovementAdder.manaillusionresist;
                case "PHYSICALILLUSIONRESIST":
                    return objImprovementAdder.physicalillusionresist;
                case "DETECTIONSPELLRESIST":
                    return objImprovementAdder.detectionspellresist;
                case "DIRECTMANASPELLRESIST":
                    return objImprovementAdder.directmanaspellresist;
                case "DIRECTPHYSICALSPELLRESIST":
                    return objImprovementAdder.directphysicalspellresist;
                case "DECREASEBODRESIST":
                    return objImprovementAdder.decreasebodresist;
                case "DECREASEAGIRESIST":
                    return objImprovementAdder.decreaseagiresist;
                case "DECREASEREARESIST":
                    return objImprovementAdder.decreaserearesist;
                case "DECREASESTRRESIST":
                    return objImprovementAdder.decreasestrresist;
                case "DECREASECHARESIST":
                    return objImprovementAdder.decreasecharesist;
                case "DECREASEINTRESIST":
                    return objImprovementAdder.decreaseintresist;
                case "DECREASELOGRESIST":
                    return objImprovementAdder.decreaselogresist;
                case "DECREASEWILRESIST":
                    return objImprovementAdder.decreasewilresist;
                case "ENABLEATTRIBUTE":
                    return objImprovementAdder.enableattribute;
                case "REPLACEATTRIBUTES":
                    return objImprovementAdder.replaceattributes;
                case "ENABLETAB":
                    return objImprovementAdder.enabletab;
                case "DISABLETAB":
                    return objImprovementAdder.disabletab;
                case "SELECTRESTRICTED":
                    return objImprovementAdder.selectrestricted;
                case "SELECTTRADITION":
                    return objImprovementAdder.selecttradition;
                case "CYBERSEEKER":
                    return objImprovementAdder.cyberseeker;
                case "CYBERLIMBATTRIBUTEBONUS":
                    return objImprovementAdder.cyberlimbattributebonus;
                case "BLOCKSKILLCATEGORYDEFAULTING":
                    return objImprovementAdder.blockskillcategorydefaulting;
                case "BLOCKSKILLGROUPDEFAULTING":
                    return objImprovementAdder.blockskillgroupdefaulting;
                case "BLOCKSKILLDEFAULTING":
                    return objImprovementAdder.blockskilldefaulting;
                case "ALLOWSKILLDEFAULTING":
                    return objImprovementAdder.allowskilldefaulting;
                case "SELECTSKILL":
                    return objImprovementAdder.selectskill;
                case "SELECTSKILLGROUP":
                    return objImprovementAdder.selectskillgroup;
                case "SELECTATTRIBUTES":
                    return objImprovementAdder.selectattributes;
                case "SELECTATTRIBUTE":
                    return objImprovementAdder.selectattribute;
                case "SELECTLIMIT":
                    return objImprovementAdder.selectlimit;
                case "SWAPSKILLATTRIBUTE":
                    return objImprovementAdder.swapskillattribute;
                case "SWAPSKILLSPECATTRIBUTE":
                    return objImprovementAdder.swapskillspecattribute;
                case "SELECTSPELL":
                    return objImprovementAdder.selectspell;
                case "ADDSPELL":
                    return objImprovementAdder.addspell;
                case "SELECTCOMPLEXFORM":
                    return objImprovementAdder.selectcomplexform;
                case "ADDCOMPLEXFORM":
                    return objImprovementAdder.addcomplexform;
                case "ADDGEAR":
                    return objImprovementAdder.addgear;
                case "ADDWEAPON":
                    return objImprovementAdder.addweapon;
                case "NATURALWEAPON":
                    return objImprovementAdder.naturalweapon;
                case "SELECTAIPROGRAM":
                    return objImprovementAdder.selectaiprogram;
                case "SELECTINHERENTAIPROGRAM":
                    return objImprovementAdder.selectinherentaiprogram;
                case "SELECTCONTACT":
                    return objImprovementAdder.selectcontact;
                case "ADDCONTACT":
                    return objImprovementAdder.addcontact;
                case "SPECIFICATTRIBUTE":
                    return objImprovementAdder.specificattribute;
                case "ATTRIBUTELEVEL":
                    return objImprovementAdder.attributelevel;
                case "SKILLLEVEL":
                    return objImprovementAdder.skilllevel;
                case "PUSHTEXT":
                    return objImprovementAdder.pushtext;
                case "ACTIVESOFT":
                    return objImprovementAdder.activesoft;
                case "SKILLSOFT":
                    return objImprovementAdder.skillsoft;
                case "KNOWLEDGESKILLLEVEL":
                    return objImprovementAdder.knowledgeskilllevel;
                case "KNOWLEDGESKILLPOINTS":
                    return objImprovementAdder.knowledgeskillpoints;
                case "SKILLGROUPLEVEL":
                    return objImprovementAdder.skillgrouplevel;
                case "NUYENMAXBP":
                    return objImprovementAdder.nuyenmaxbp;
                case "PHYSICALLIMIT":
                    return objImprovementAdder.physicallimit;
                case "MENTALLIMIT":
                    return objImprovementAdder.mentallimit;
                case "SOCIALLIMIT":
                    return objImprovementAdder.sociallimit;
                case "NUYENAMT":
                    return objImprovementAdder.nuyenamt;
                case "CONDITIONMONITOR":
                    return objImprovementAdder.conditionmonitor;
                case "LIVINGPERSONA":
                    return objImprovementAdder.livingpersona;
                case "SPECIFICSKILL":
                    return objImprovementAdder.specificskill;
                case "REFLEXRECORDEROPTIMIZATION":
                    return objImprovementAdder.reflexrecorderoptimization;
                case "REMOVESKILLCATEGORYDEFAULTPENALTY":
                    return objImprovementAdder.removeskillcategorydefaultpenalty;
                case "REMOVESKILLGROUPDEFAULTPENALTY":
                    return objImprovementAdder.removeskillgroupdefaultpenalty;
                case "REMOVESKILLDEFAULTPENALTY":
                    return objImprovementAdder.removeskilldefaultpenalty;
                case "MARTIALART":
                    return objImprovementAdder.martialart;
                case "LIMITMODIFIER":
                    return objImprovementAdder.limitmodifier;
                case "SKILLCATEGORY":
                    return objImprovementAdder.skillcategory;
                case "SKILLGROUP":
                    return objImprovementAdder.skillgroup;
                case "SKILLATTRIBUTE":
                    return objImprovementAdder.skillattribute;
                case "SKILLLINKEDATTRIBUTE":
                    return objImprovementAdder.skilllinkedattribute;
                case "SKILLARTICULATION":
                    return objImprovementAdder.skillarticulation;
                case "ARMOR":
                    return objImprovementAdder.armor;
                case "FIREARMOR":
                    return objImprovementAdder.firearmor;
                case "COLDARMOR":
                    return objImprovementAdder.coldarmor;
                case "ELECTRICITYARMOR":
                    return objImprovementAdder.electricityarmor;
                case "ACIDARMOR":
                    return objImprovementAdder.acidarmor;
                case "FALLINGARMOR":
                    return objImprovementAdder.fallingarmor;
                case "DODGE":
                    return objImprovementAdder.dodge;
                case "REACH":
                    return objImprovementAdder.reach;
                case "UNARMEDDV":
                    return objImprovementAdder.unarmeddv;
                case "UNARMEDDVPHYSICAL":
                    return objImprovementAdder.unarmeddvphysical;
                case "UNARMEDAP":
                    return objImprovementAdder.unarmedap;
                case "UNARMEDREACH":
                    return objImprovementAdder.unarmedreach;
                case "INITIATIVE":
                    return objImprovementAdder.initiative;
                case "INITIATIVEPASS":
                    return objImprovementAdder.initiativepass;
                case "INITIATIVEDICE":
                    return objImprovementAdder.initiativedice;
                case "INITIATIVEPASSADD":
                    return objImprovementAdder.initiativepassadd;
                case "INITIATIVEDICEADD":
                    return objImprovementAdder.initiativediceadd;
                case "MATRIXINITIATIVE":
                    return objImprovementAdder.matrixinitiative;
                case "MATRIXINITIATIVEPASS":
                    return objImprovementAdder.matrixinitiativepass;
                case "MATRIXINITIATIVEDICE":
                    return objImprovementAdder.matrixinitiativedice;
                case "MATRIXINITIATIVEPASSADD":
                    return objImprovementAdder.matrixinitiativepassadd;
                case "MATRIXINITIATIVEDICEADD":
                    return objImprovementAdder.matrixinitiativediceadd;
                case "AVAILABILITY":
                    return objImprovementAdder.availability;
                case "LIFESTYLECOST":
                    return objImprovementAdder.lifestylecost;
                case "BASICLIFESTYLECOST":
                    return objImprovementAdder.basiclifestylecost;
                case "GENETECHCOSTMULTIPLIER":
                    return objImprovementAdder.genetechcostmultiplier;
                case "GENETECHESSMULTIPLIER":
                    return objImprovementAdder.genetechessmultiplier;
                case "BASICBIOWAREESSMULTIPLIER":
                    return objImprovementAdder.basicbiowareessmultiplier;
                case "BIOWAREESSMULTIPLIER":
                    return objImprovementAdder.biowareessmultiplier;
                case "BIOWARETOTALESSMULTIPLIER":
                    return objImprovementAdder.biowaretotalessmultiplier;
                case "CYBERWAREESSMULTIPLIER":
                    return objImprovementAdder.cyberwareessmultiplier;
                case "CYBERWARETOTALESSMULTIPLIER":
                    return objImprovementAdder.cyberwaretotalessmultiplier;
                case "BIOWAREESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAdder.biowareessmultipliernonretroactive;
                case "BIOWARETOTALESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAdder.biowaretotalessmultipliernonretroactive;
                case "CYBERWAREESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAdder.cyberwareessmultipliernonretroactive;
                case "CYBERWARETOTALESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAdder.cyberwaretotalessmultipliernonretroactive;
                case "PROTOTYPETRANSHUMAN":
                    return objImprovementAdder.prototypetranshuman;
                case "FRIENDSINHIGHPLACES":
                    return objImprovementAdder.friendsinhighplaces;
                case "EXCON":
                    return objImprovementAdder.excon;
                case "TRUSTFUND":
                    return objImprovementAdder.trustfund;
                case "MADEMAN":
                    return objImprovementAdder.mademan;
                case "FAME":
                    return objImprovementAdder.fame;
                case "ERASED":
                    return objImprovementAdder.erased;
                case "OVERCLOCKER":
                    return objImprovementAdder.overclocker;
                case "RESTRICTEDGEAR":
                    return objImprovementAdder.restrictedgear;
                case "NATIVELANGUAGELIMIT":
                    return objImprovementAdder.nativelanguagelimit;
                case "AMBIDEXTROUS":
                    return objImprovementAdder.ambidextrous;
                case "WEAPONCATEGORYDV":
                    return objImprovementAdder.weaponcategorydv;
                case "WEAPONCATEGORYDICE":
                    return objImprovementAdder.weaponcategorydice;
                case "WEAPONSPECIFICDICE":
                    return objImprovementAdder.weaponspecificdice;
                case "WEAPONCATEGORYAP":
                    return objImprovementAdder.weaponcategoryap;
                case "WEAPONCATEGORYACCURACY":
                    return objImprovementAdder.weaponcategoryaccuracy;
                case "WEAPONCATEGORYREACH":
                    return objImprovementAdder.weaponcategoryreach;
                case "WEAPONSPECIFICDV":
                    return objImprovementAdder.weaponspecificdv;
                case "WEAPONSPECIFICAP":
                    return objImprovementAdder.weaponspecificap;
                case "WEAPONSPECIFICACCURACY":
                    return objImprovementAdder.weaponspecificaccuracy;
                case "WEAPONSPECIFICRANGE":
                    return objImprovementAdder.weaponspecificrange;
                case "SELECTMENTORSPIRIT":
                    return objImprovementAdder.selectmentorspirit;
                case "SELECTPARAGON":
                    return objImprovementAdder.selectparagon;
                case "SMARTLINK":
                    return objImprovementAdder.smartlink;
                case "ADAPSIN":
                    return objImprovementAdder.adapsin;
                case "SOFTWEAVE":
                    return objImprovementAdder.softweave;
                case "DISABLEBIOWARE":
                    return objImprovementAdder.disablebioware;
                case "DISABLECYBERWARE":
                    return objImprovementAdder.disablecyberware;
                case "DISABLEBIOWAREGRADE":
                    return objImprovementAdder.disablebiowaregrade;
                case "DISABLECYBERWAREGRADE":
                    return objImprovementAdder.disablecyberwaregrade;
                case "WALKMULTIPLIER":
                    return objImprovementAdder.walkmultiplier;
                case "RUNMULTIPLIER":
                    return objImprovementAdder.runmultiplier;
                case "SPRINTBONUS":
                    return objImprovementAdder.sprintbonus;
                case "FREEPOSITIVEQUALITIES":
                    return objImprovementAdder.freepositivequalities;
                case "FREENEGATIVEQUALITIES":
                    return objImprovementAdder.freenegativequalities;
                case "SELECTSIDE":
                    return objImprovementAdder.selectside;
                case "FREESPIRITPOWERPOINTS":
                    return objImprovementAdder.freespiritpowerpoints;
                case "ADEPTPOWERPOINTS":
                    return objImprovementAdder.adeptpowerpoints;
                case "SPECIFICPOWER":
                    return objImprovementAdder.specificpower;
                case "SELECTPOWERS":
                    return objImprovementAdder.selectpowers;
                case "ARMORENCUMBRANCEPENALTY":
                    return objImprovementAdder.armorencumbrancepenalty;
                case "ADDART":
                    return objImprovementAdder.addart;
                case "SELECTART":
                    return objImprovementAdder.selectart;
                case "ADDMETAMAGIC":
                    return objImprovementAdder.addmetamagic;
                case "SELECTMETAMAGIC":
                    return objImprovementAdder.selectmetamagic;
                case "ADDECHO":
                    return objImprovementAdder.addecho;
                case "SELECTECHO":
                    return objImprovementAdder.selectecho;
                case "SKILLWIRE":
                    return objImprovementAdder.skillwire;
                case "HARDWIRES":
                    return objImprovementAdder.hardwires;
                case "DAMAGERESISTANCE":
                    return objImprovementAdder.damageresistance;
                case "JUDGEINTENTIONS":
                    return objImprovementAdder.judgeintentions;
                case "JUDGEINTENTIONSOFFENSE":
                    return objImprovementAdder.judgeintentionsoffense;
                case "JUDGEINTENTIONSDEFENSE":
                    return objImprovementAdder.judgeintentionsdefense;
                case "COMPOSURE":
                    return objImprovementAdder.composure;
                case "LIFTANDCARRY":
                    return objImprovementAdder.liftandcarry;
                case "MEMORY":
                    return objImprovementAdder.memory;
                case "FATIGUERESIST":
                    return objImprovementAdder.fatigueresist;
                case "RADIATIONRESIST":
                    return objImprovementAdder.radiationresist;
                case "SONICRESIST":
                    return objImprovementAdder.sonicresist;
                case "TOXINCONTACTRESIST":
                    return objImprovementAdder.toxincontactresist;
                case "TOXININGESTIONRESIST":
                    return objImprovementAdder.toxiningestionresist;
                case "TOXININHALATIONRESIST":
                    return objImprovementAdder.toxininhalationresist;
                case "TOXININJECTIONRESIST":
                    return objImprovementAdder.toxininjectionresist;
                case "PATHOGENCONTACTRESIST":
                    return objImprovementAdder.pathogencontactresist;
                case "PATHOGENINGESTIONRESIST":
                    return objImprovementAdder.pathogeningestionresist;
                case "PATHOGENINHALATIONRESIST":
                    return objImprovementAdder.pathogeninhalationresist;
                case "PATHOGENINJECTIONRESIST":
                    return objImprovementAdder.pathogeninjectionresist;
                case "TOXINCONTACTIMMUNE":
                    return objImprovementAdder.toxincontactimmune;
                case "TOXININGESTIONIMMUNE":
                    return objImprovementAdder.toxiningestionimmune;
                case "TOXININHALATIONIMMUNE":
                    return objImprovementAdder.toxininhalationimmune;
                case "TOXININJECTIONIMMUNE":
                    return objImprovementAdder.toxininjectionimmune;
                case "PATHOGENCONTACTIMMUNE":
                    return objImprovementAdder.pathogencontactimmune;
                case "PATHOGENINGESTIONIMMUNE":
                    return objImprovementAdder.pathogeningestionimmune;
                case "PATHOGENINHALATIONIMMUNE":
                    return objImprovementAdder.pathogeninhalationimmune;
                case "PATHOGENINJECTIONIMMUNE":
                    return objImprovementAdder.pathogeninjectionimmune;
                case "PHYSIOLOGICALADDICTIONFIRSTTIME":
                    return objImprovementAdder.physiologicaladdictionfirsttime;
                case "PSYCHOLOGICALADDICTIONFIRSTTIME":
                    return objImprovementAdder.psychologicaladdictionfirsttime;
                case "PHYSIOLOGICALADDICTIONALREADYADDICTED":
                    return objImprovementAdder.physiologicaladdictionalreadyaddicted;
                case "PSYCHOLOGICALADDICTIONALREADYADDICTED":
                    return objImprovementAdder.psychologicaladdictionalreadyaddicted;
                case "STUNCMRECOVERY":
                    return objImprovementAdder.stuncmrecovery;
                case "PHYSICALCMRECOVERY":
                    return objImprovementAdder.physicalcmrecovery;
                case "ADDESSTOSTUNCMRECOVERY":
                    return objImprovementAdder.addesstostuncmrecovery;
                case "ADDESSTOPHYSICALCMRECOVERY":
                    return objImprovementAdder.addesstophysicalcmrecovery;
                case "CONCEALABILITY":
                    return objImprovementAdder.concealability;
                case "DRAINRESIST":
                    return objImprovementAdder.drainresist;
                case "DRAINVALUE":
                    return objImprovementAdder.drainvalue;
                case "FADINGRESIST":
                    return objImprovementAdder.fadingresist;
                case "FADINGVALUE":
                    return objImprovementAdder.fadingvalue;
                case "NOTORIETY":
                    return objImprovementAdder.notoriety;
                case "STREETCRED":
                    return objImprovementAdder.streetcred;
                case "STREETCREDMULTIPLIER":
                    return objImprovementAdder.streetcredmultiplier;
                case "COMPLEXFORMLIMIT":
                    return objImprovementAdder.complexformlimit;
                case "SPELLLIMIT":
                    return objImprovementAdder.spelllimit;
                case "FREESPELLS":
                    return objImprovementAdder.freespells;
                case "SPELLCATEGORY":
                    return objImprovementAdder.spellcategory;
                case "SPELLCATEGORYDICEPOOL":
                    return objImprovementAdder.spellcategorydicepool;
                case "SPELLDICEPOOL":
                    return objImprovementAdder.spelldicepool;
                case "SPELLCATEGORYDRAIN":
                    return objImprovementAdder.spellcategorydrain;
                case "SPELLCATEGORYDAMAGE":
                    return objImprovementAdder.spellcategorydamage;
                case "SPELLDESCRIPTORDAMAGE":
                    return objImprovementAdder.spelldescriptordamage;
                case "SPELLDESCRIPTORDRAIN":
                    return objImprovementAdder.spelldescriptordrain;
                case "THROWRANGE":
                    return objImprovementAdder.throwrange;
                case "THROWRANGESTR":
                    return objImprovementAdder.throwrangestr;
                case "THROWSTR":
                    return objImprovementAdder.throwstr;
                case "SKILLSOFTACCESS":
                    return objImprovementAdder.skillsoftaccess;
                case "QUICKENINGMETAMAGIC":
                    return objImprovementAdder.quickeningmetamagic;
                case "IGNORECMPENALTYSTUN":
                    return objImprovementAdder.ignorecmpenaltystun;
                case "IGNORECMPENALTYPHYSICAL":
                    return objImprovementAdder.ignorecmpenaltyphysical;
                case "CYBORGESSENCE":
                    return objImprovementAdder.cyborgessence;
                case "ESSENCEPENALTY":
                    return objImprovementAdder.essencepenalty;
                case "ESSENCEPENALTYT100":
                    return objImprovementAdder.essencepenaltyt100;
                case "ESSENCEPENALTYMAGONLYT100":
                    return objImprovementAdder.essencepenaltymagonlyt100;
                case "ESSENCEPENALTYRESONLYT100":
                    return objImprovementAdder.essencepenaltyresonlyt100;
                case "ESSENCEPENALTYDEPONLYT100":
                    return objImprovementAdder.essencepenaltydeponlyt100;
                case "SPECIALATTBURNMULTIPLIER":
                    return objImprovementAdder.specialattburnmultiplier;
                case "SPECIALATTTOTALBURNMULTIPLIER":
                    return objImprovementAdder.specialatttotalburnmultiplier;
                case "ESSENCEMAX":
                    return objImprovementAdder.essencemax;
                case "SELECTSPRITE":
                    return objImprovementAdder.selectsprite;
                case "BLACKMARKETDISCOUNT":
                    return objImprovementAdder.blackmarketdiscount;
                case "SELECTARMOR":
                    return objImprovementAdder.selectarmor;
                case "SELECTCYBERWARE":
                    return objImprovementAdder.selectcyberware;
                case "SELECTWEAPON":
                    return objImprovementAdder.selectweapon;
                case "OPTIONALPOWERS":
                    return objImprovementAdder.optionalpowers;
                case "CRITTERPOWERS":
                    return objImprovementAdder.critterpowers;
                case "CRITTERPOWERLEVELS":
                    return objImprovementAdder.critterpowerlevels;
                case "PUBLICAWARENESS":
                    return objImprovementAdder.publicawareness;
                case "DEALERCONNECTION":
                    return objImprovementAdder.dealerconnection;
                case "UNLOCKSKILLS":
                    return objImprovementAdder.unlockskills;
                case "ADDQUALITIES":
                    return objImprovementAdder.addqualities;
                case "SELECTQUALITY":
                    return objImprovementAdder.selectquality;
                case "ADDSKILLSPECIALIZATION":
                    return objImprovementAdder.addskillspecialization;
                case "ADDSKILLSPECIALIZATIONOPTION":
                    return objImprovementAdder.addskillspecializationoption;
                case "ALLOWSPELLRANGE":
                    return objImprovementAdder.allowspellrange;
                case "ALLOWSPELLCATEGORY":
                    return objImprovementAdder.allowspellcategory;
                case "LIMITSPELLRANGE":
                    return objImprovementAdder.limitspellrange;
                case "LIMITSPELLCATEGORY":
                    return objImprovementAdder.limitspellcategory;
                case "LIMITSPELLDESCRIPTOR":
                    return objImprovementAdder.limitspelldescriptor;
                case "BLOCKSPELLDESCRIPTOR":
                    return objImprovementAdder.blockspelldescriptor;
                case "ADDSPRITE":
                    return objImprovementAdder.addsprite;
                case "ADDSPIRIT":
                    return objImprovementAdder.addspirit;
                case "LIMITSPIRITCATEGORY":
                    return objImprovementAdder.limitspiritcategory;
                case "MOVEMENTREPLACE":
                    return objImprovementAdder.movementreplace;
                case "ADDLIMB":
                    return objImprovementAdder.addlimb;
                case "ATTRIBUTEKARMACOST":
                    return objImprovementAdder.attributekarmacost;
                case "ACTIVESKILLKARMACOST":
                    return objImprovementAdder.activeskillkarmacost;
                case "SKILLGROUPKARMACOST":
                    return objImprovementAdder.skillgroupkarmacost;
                case "KNOWLEDGESKILLKARMACOST":
                    return objImprovementAdder.knowledgeskillkarmacost;
                case "KNOWLEDGESKILLKARMACOSTMIN":
                    return objImprovementAdder.knowledgeskillkarmacostmin;
                case "SKILLENABLEMOVEMENT":
                    return objImprovementAdder.skillenablemovement;
                case "SKILLDISABLE":
                    return objImprovementAdder.skilldisable;
                case "SKILLGROUPDISABLE":
                    return objImprovementAdder.skillgroupdisable;
                case "SKILLGROUPDISABLECHOICE":
                    return objImprovementAdder.skillgroupdisablechoice;
                case "SKILLGROUPCATEGORYDISABLE":
                    return objImprovementAdder.skillgroupcategorydisable;
                case "SKILLGROUPCATEGORYKARMACOST":
                    return objImprovementAdder.skillgroupcategorykarmacost;
                case "SKILLCATEGORYKARMACOST":
                    return objImprovementAdder.skillcategorykarmacost;
                case "SKILLCATEGORYSPECIALIZATIONKARMACOST":
                    return objImprovementAdder.skillcategoryspecializationkarmacost;
                case "ATTRIBUTEPOINTCOST":
                    return objImprovementAdder.attributepointcost;
                case "ACTIVESKILLPOINTCOST":
                    return objImprovementAdder.activeskillpointcost;
                case "SKILLGROUPPOINTCOST":
                    return objImprovementAdder.skillgrouppointcost;
                case "KNOWLEDGESKILLPOINTCOST":
                    return objImprovementAdder.knowledgeskillpointcost;
                case "SKILLGROUPCATEGORYPOINTCOST":
                    return objImprovementAdder.skillgroupcategorypointcost;
                case "SKILLCATEGORYPOINTCOST":
                    return objImprovementAdder.skillcategorypointcost;
                case "NEWSPELLKARMACOST":
                    return objImprovementAdder.newspellkarmacost;
                case "NEWCOMPLEXFORMKARMACOST":
                    return objImprovementAdder.newcomplexformkarmacost;
                case "NEWAIPROGRAMKARMACOST":
                    return objImprovementAdder.newaiprogramkarmacost;
                case "NEWAIADVANCEDPROGRAMKARMACOST":
                    return objImprovementAdder.newaiadvancedprogramkarmacost;
                case "ATTRIBUTEKARMACOSTMULTIPLIER":
                    return objImprovementAdder.attributekarmacostmultiplier;
                case "ACTIVESKILLKARMACOSTMULTIPLIER":
                    return objImprovementAdder.activeskillkarmacostmultiplier;
                case "SKILLGROUPKARMACOSTMULTIPLIER":
                    return objImprovementAdder.skillgroupkarmacostmultiplier;
                case "KNOWLEDGESKILLKARMACOSTMULTIPLIER":
                    return objImprovementAdder.knowledgeskillkarmacostmultiplier;
                case "SKILLGROUPCATEGORYKARMACOSTMULTIPLIER":
                    return objImprovementAdder.skillgroupcategorykarmacostmultiplier;
                case "SKILLCATEGORYKARMACOSTMULTIPLIER":
                    return objImprovementAdder.skillcategorykarmacostmultiplier;
                case "SKILLCATEGORYSPECIALIZATIONKARMACOSTMULTIPLIER":
                    return objImprovementAdder.skillcategoryspecializationkarmacostmultiplier;
                case "ATTRIBUTEPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.attributepointcostmultiplier;
                case "ACTIVESKILLPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.activeskillpointcostmultiplier;
                case "SKILLGROUPPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.skillgrouppointcostmultiplier;
                case "KNOWLEDGESKILLPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.knowledgeskillpointcostmultiplier;
                case "SKILLGROUPCATEGORYPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.skillgroupcategorypointcostmultiplier;
                case "SKILLCATEGORYPOINTCOSTMULTIPLIER":
                    return objImprovementAdder.skillcategorypointcostmultiplier;
                case "NEWSPELLKARMACOSTMULTIPLIER":
                    return objImprovementAdder.newspellkarmacostmultiplier;
                case "NEWCOMPLEXFORMKARMACOSTMULTIPLIER":
                    return objImprovementAdder.newcomplexformkarmacostmultiplier;
                case "NEWAIPROGRAMKARMACOSTMULTIPLIER":
                    return objImprovementAdder.newaiprogramkarmacostmultiplier;
                case "NEWAIADVANCEDPROGRAMKARMACOSTMULTIPLIER":
                    return objImprovementAdder.newaiadvancedprogramkarmacostmultiplier;
                case "BLOCKSKILLSPECIALIZATIONS":
                    return objImprovementAdder.blockskillspecializations;
                case "BLOCKSKILLCATEGORYSPECIALIZATIONS":
                    return objImprovementAdder.blockskillcategoryspecializations;
                case "FOCUSBINDINGKARMACOST":
                    return objImprovementAdder.focusbindingkarmacost;
                case "FOCUSBINDINGKARMAMULTIPLIER":
                    return objImprovementAdder.focusbindingkarmamultiplier;
                case "MAGICIANSWAYDISCOUNT":
                    return objImprovementAdder.magicianswaydiscount;
                case "BURNOUTSWAY":
                    return objImprovementAdder.burnoutsway;
                case "ADDWARE":
                    return objImprovementAdder.addware;
                case "WEAPONACCURACY":
                    return objImprovementAdder.weaponaccuracy;
                case "WEAPONRANGEMODIFIER":
                    return objImprovementAdder.weaponrangemodifier;
                case "WEAPONSKILLACCURACY":
                    return objImprovementAdder.weaponskillaccuracy;
                case "METAGENICLIMIT":
                    return objImprovementAdder.metageniclimit;
                case "SPECIALMODIFICATIONLIMIT":
                    return objImprovementAdder.specialmodificationlimit;
                case "CYBERADEPTDAEMON":
                    return objImprovementAdder.cyberadeptdaemon;
                case "ACTIONDICEPOOL":
                    return objImprovementAdder.actiondicepool;
                case "CONTACTKARMA":
                    return objImprovementAdder.contactkarma;
                case "CONTACTKARMAMINIMUM":
                    return objImprovementAdder.contactkarmaminimum;
                case "ALLOWSPRITEFETTERING":
                    return objImprovementAdder.allowspritefettering;
                case "ENABLECYBERZOMBIE":
                    return objImprovementAdder.enablecyberzombie;
                case "ALLOWCRITTERPOWERCATEGORY":
                    return objImprovementAdder.allowcritterpowercategory;
                case "LIMITCRITTERPOWERCATEGORY":
                    return objImprovementAdder.limitcritterpowercategory;
                case "ATTRIBUTEMAXCLAMP":
                    return objImprovementAdder.attributemaxclamp;
                case "METAMAGICLIMIT":
                    return objImprovementAdder.metamagiclimit;
                case "DISABLEQUALITY":
                    return objImprovementAdder.disablequality;
                case "FREEQUALITY":
                    return objImprovementAdder.freequality;
                case "SELECTEXPERTISE":
                    return objImprovementAdder.selectexpertise;
                case "PENALTYFREESUSTAIN":
                    return objImprovementAdder.penaltyfreesustain;
                case "REPLACESKILLSPELL":
                    return objImprovementAdder.replaceskillspell;
                case "QUALITYLEVEL":
                    return objImprovementAdder.qualitylevel;
                case "SELECTTEXT":
                    return AddImprovementCollection.selecttext;
                // No method matches, return a null pointer
                default:
                    return null;
            }
        }

        /// <summary>
        /// Gets an AddImprovementAsyncCollection function based on its name.
        /// </summary>
        /// <param name="strMethodName">Name of the function, in all uppercase.</param>
        /// <param name="objImprovementAsyncAdder">Container for the function (since they're not static, we need a container).</param>
        /// <returns>Function pointer to the named function if one is found. If none are found, returns a null pointer.</returns>
        public static Func<XmlNode, CancellationToken, Task> GetAsyncMethod(string strMethodName, [Annotations.NotNull] AddImprovementAsyncCollection objImprovementAsyncAdder)
        {
            if (objImprovementAsyncAdder == null)
                throw new ArgumentNullException(nameof(objImprovementAsyncAdder));
            // Switch-cases get compiled as hashes, so this is as close as you can get to a compile-time Dictionary
            switch (strMethodName)
            {
                case "SURPRISE":
                    return objImprovementAsyncAdder.surprise;
                case "SPELLRESISTANCE":
                    return objImprovementAsyncAdder.spellresistance;
                case "MENTALMANIPULATIONRESIST":
                    return objImprovementAsyncAdder.mentalmanipulationresist;
                case "PHYSICALMANIPULATIONRESIST":
                    return objImprovementAsyncAdder.physicalmanipulationresist;
                case "MANAILLUSIONRESIST":
                    return objImprovementAsyncAdder.manaillusionresist;
                case "PHYSICALILLUSIONRESIST":
                    return objImprovementAsyncAdder.physicalillusionresist;
                case "DETECTIONSPELLRESIST":
                    return objImprovementAsyncAdder.detectionspellresist;
                case "DIRECTMANASPELLRESIST":
                    return objImprovementAsyncAdder.directmanaspellresist;
                case "DIRECTPHYSICALSPELLRESIST":
                    return objImprovementAsyncAdder.directphysicalspellresist;
                case "DECREASEBODRESIST":
                    return objImprovementAsyncAdder.decreasebodresist;
                case "DECREASEAGIRESIST":
                    return objImprovementAsyncAdder.decreaseagiresist;
                case "DECREASEREARESIST":
                    return objImprovementAsyncAdder.decreaserearesist;
                case "DECREASESTRRESIST":
                    return objImprovementAsyncAdder.decreasestrresist;
                case "DECREASECHARESIST":
                    return objImprovementAsyncAdder.decreasecharesist;
                case "DECREASEINTRESIST":
                    return objImprovementAsyncAdder.decreaseintresist;
                case "DECREASELOGRESIST":
                    return objImprovementAsyncAdder.decreaselogresist;
                case "DECREASEWILRESIST":
                    return objImprovementAsyncAdder.decreasewilresist;
                case "ENABLEATTRIBUTE":
                    return objImprovementAsyncAdder.enableattribute;
                case "REPLACEATTRIBUTES":
                    return objImprovementAsyncAdder.replaceattributes;
                case "ENABLETAB":
                    return objImprovementAsyncAdder.enabletab;
                case "DISABLETAB":
                    return objImprovementAsyncAdder.disabletab;
                case "SELECTRESTRICTED":
                    return objImprovementAsyncAdder.selectrestricted;
                case "SELECTTRADITION":
                    return objImprovementAsyncAdder.selecttradition;
                case "CYBERSEEKER":
                    return objImprovementAsyncAdder.cyberseeker;
                case "CYBERLIMBATTRIBUTEBONUS":
                    return objImprovementAsyncAdder.cyberlimbattributebonus;
                case "BLOCKSKILLCATEGORYDEFAULTING":
                    return objImprovementAsyncAdder.blockskillcategorydefaulting;
                case "BLOCKSKILLGROUPDEFAULTING":
                    return objImprovementAsyncAdder.blockskillgroupdefaulting;
                case "BLOCKSKILLDEFAULTING":
                    return objImprovementAsyncAdder.blockskilldefaulting;
                case "ALLOWSKILLDEFAULTING":
                    return objImprovementAsyncAdder.allowskilldefaulting;
                case "SELECTSKILL":
                    return objImprovementAsyncAdder.selectskill;
                case "SELECTSKILLGROUP":
                    return objImprovementAsyncAdder.selectskillgroup;
                case "SELECTATTRIBUTES":
                    return objImprovementAsyncAdder.selectattributes;
                case "SELECTATTRIBUTE":
                    return objImprovementAsyncAdder.selectattribute;
                case "SELECTLIMIT":
                    return objImprovementAsyncAdder.selectlimit;
                case "SWAPSKILLATTRIBUTE":
                    return objImprovementAsyncAdder.swapskillattribute;
                case "SWAPSKILLSPECATTRIBUTE":
                    return objImprovementAsyncAdder.swapskillspecattribute;
                case "SELECTSPELL":
                    return objImprovementAsyncAdder.selectspell;
                case "ADDSPELL":
                    return objImprovementAsyncAdder.addspell;
                case "SELECTCOMPLEXFORM":
                    return objImprovementAsyncAdder.selectcomplexform;
                case "ADDCOMPLEXFORM":
                    return objImprovementAsyncAdder.addcomplexform;
                case "ADDGEAR":
                    return objImprovementAsyncAdder.addgear;
                case "ADDWEAPON":
                    return objImprovementAsyncAdder.addweapon;
                case "NATURALWEAPON":
                    return objImprovementAsyncAdder.naturalweapon;
                case "SELECTAIPROGRAM":
                    return objImprovementAsyncAdder.selectaiprogram;
                case "SELECTINHERENTAIPROGRAM":
                    return objImprovementAsyncAdder.selectinherentaiprogram;
                case "SELECTCONTACT":
                    return objImprovementAsyncAdder.selectcontact;
                case "ADDCONTACT":
                    return objImprovementAsyncAdder.addcontact;
                case "SPECIFICATTRIBUTE":
                    return objImprovementAsyncAdder.specificattribute;
                case "ATTRIBUTELEVEL":
                    return objImprovementAsyncAdder.attributelevel;
                case "SKILLLEVEL":
                    return objImprovementAsyncAdder.skilllevel;
                case "PUSHTEXT":
                    return objImprovementAsyncAdder.pushtext;
                case "ACTIVESOFT":
                    return objImprovementAsyncAdder.activesoft;
                case "SKILLSOFT":
                    return objImprovementAsyncAdder.skillsoft;
                case "KNOWLEDGESKILLLEVEL":
                    return objImprovementAsyncAdder.knowledgeskilllevel;
                case "KNOWLEDGESKILLPOINTS":
                    return objImprovementAsyncAdder.knowledgeskillpoints;
                case "SKILLGROUPLEVEL":
                    return objImprovementAsyncAdder.skillgrouplevel;
                case "NUYENMAXBP":
                    return objImprovementAsyncAdder.nuyenmaxbp;
                case "PHYSICALLIMIT":
                    return objImprovementAsyncAdder.physicallimit;
                case "MENTALLIMIT":
                    return objImprovementAsyncAdder.mentallimit;
                case "SOCIALLIMIT":
                    return objImprovementAsyncAdder.sociallimit;
                case "NUYENAMT":
                    return objImprovementAsyncAdder.nuyenamt;
                case "CONDITIONMONITOR":
                    return objImprovementAsyncAdder.conditionmonitor;
                case "LIVINGPERSONA":
                    return objImprovementAsyncAdder.livingpersona;
                case "SPECIFICSKILL":
                    return objImprovementAsyncAdder.specificskill;
                case "REFLEXRECORDEROPTIMIZATION":
                    return objImprovementAsyncAdder.reflexrecorderoptimization;
                case "REMOVESKILLCATEGORYDEFAULTPENALTY":
                    return objImprovementAsyncAdder.removeskillcategorydefaultpenalty;
                case "REMOVESKILLGROUPDEFAULTPENALTY":
                    return objImprovementAsyncAdder.removeskillgroupdefaultpenalty;
                case "REMOVESKILLDEFAULTPENALTY":
                    return objImprovementAsyncAdder.removeskilldefaultpenalty;
                case "MARTIALART":
                    return objImprovementAsyncAdder.martialart;
                case "LIMITMODIFIER":
                    return objImprovementAsyncAdder.limitmodifier;
                case "SKILLCATEGORY":
                    return objImprovementAsyncAdder.skillcategory;
                case "SKILLGROUP":
                    return objImprovementAsyncAdder.skillgroup;
                case "SKILLATTRIBUTE":
                    return objImprovementAsyncAdder.skillattribute;
                case "SKILLLINKEDATTRIBUTE":
                    return objImprovementAsyncAdder.skilllinkedattribute;
                case "SKILLARTICULATION":
                    return objImprovementAsyncAdder.skillarticulation;
                case "ARMOR":
                    return objImprovementAsyncAdder.armor;
                case "FIREARMOR":
                    return objImprovementAsyncAdder.firearmor;
                case "COLDARMOR":
                    return objImprovementAsyncAdder.coldarmor;
                case "ELECTRICITYARMOR":
                    return objImprovementAsyncAdder.electricityarmor;
                case "ACIDARMOR":
                    return objImprovementAsyncAdder.acidarmor;
                case "FALLINGARMOR":
                    return objImprovementAsyncAdder.fallingarmor;
                case "DODGE":
                    return objImprovementAsyncAdder.dodge;
                case "REACH":
                    return objImprovementAsyncAdder.reach;
                case "UNARMEDDV":
                    return objImprovementAsyncAdder.unarmeddv;
                case "UNARMEDDVPHYSICAL":
                    return objImprovementAsyncAdder.unarmeddvphysical;
                case "UNARMEDAP":
                    return objImprovementAsyncAdder.unarmedap;
                case "UNARMEDREACH":
                    return objImprovementAsyncAdder.unarmedreach;
                case "INITIATIVE":
                    return objImprovementAsyncAdder.initiative;
                case "INITIATIVEPASS":
                    return objImprovementAsyncAdder.initiativepass;
                case "INITIATIVEDICE":
                    return objImprovementAsyncAdder.initiativedice;
                case "INITIATIVEPASSADD":
                    return objImprovementAsyncAdder.initiativepassadd;
                case "INITIATIVEDICEADD":
                    return objImprovementAsyncAdder.initiativediceadd;
                case "MATRIXINITIATIVE":
                    return objImprovementAsyncAdder.matrixinitiative;
                case "MATRIXINITIATIVEPASS":
                    return objImprovementAsyncAdder.matrixinitiativepass;
                case "MATRIXINITIATIVEDICE":
                    return objImprovementAsyncAdder.matrixinitiativedice;
                case "MATRIXINITIATIVEPASSADD":
                    return objImprovementAsyncAdder.matrixinitiativepassadd;
                case "MATRIXINITIATIVEDICEADD":
                    return objImprovementAsyncAdder.matrixinitiativediceadd;
                case "AVAILABILITY":
                    return objImprovementAsyncAdder.availability;
                case "LIFESTYLECOST":
                    return objImprovementAsyncAdder.lifestylecost;
                case "BASICLIFESTYLECOST":
                    return objImprovementAsyncAdder.basiclifestylecost;
                case "GENETECHCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.genetechcostmultiplier;
                case "GENETECHESSMULTIPLIER":
                    return objImprovementAsyncAdder.genetechessmultiplier;
                case "BASICBIOWAREESSMULTIPLIER":
                    return objImprovementAsyncAdder.basicbiowareessmultiplier;
                case "BIOWAREESSMULTIPLIER":
                    return objImprovementAsyncAdder.biowareessmultiplier;
                case "BIOWARETOTALESSMULTIPLIER":
                    return objImprovementAsyncAdder.biowaretotalessmultiplier;
                case "CYBERWAREESSMULTIPLIER":
                    return objImprovementAsyncAdder.cyberwareessmultiplier;
                case "CYBERWARETOTALESSMULTIPLIER":
                    return objImprovementAsyncAdder.cyberwaretotalessmultiplier;
                case "BIOWAREESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAsyncAdder.biowareessmultipliernonretroactive;
                case "BIOWARETOTALESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAsyncAdder.biowaretotalessmultipliernonretroactive;
                case "CYBERWAREESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAsyncAdder.cyberwareessmultipliernonretroactive;
                case "CYBERWARETOTALESSMULTIPLIERNONRETROACTIVE":
                    return objImprovementAsyncAdder.cyberwaretotalessmultipliernonretroactive;
                case "PROTOTYPETRANSHUMAN":
                    return objImprovementAsyncAdder.prototypetranshuman;
                case "FRIENDSINHIGHPLACES":
                    return objImprovementAsyncAdder.friendsinhighplaces;
                case "EXCON":
                    return objImprovementAsyncAdder.excon;
                case "TRUSTFUND":
                    return objImprovementAsyncAdder.trustfund;
                case "MADEMAN":
                    return objImprovementAsyncAdder.mademan;
                case "FAME":
                    return objImprovementAsyncAdder.fame;
                case "ERASED":
                    return objImprovementAsyncAdder.erased;
                case "OVERCLOCKER":
                    return objImprovementAsyncAdder.overclocker;
                case "RESTRICTEDGEAR":
                    return objImprovementAsyncAdder.restrictedgear;
                case "NATIVELANGUAGELIMIT":
                    return objImprovementAsyncAdder.nativelanguagelimit;
                case "AMBIDEXTROUS":
                    return objImprovementAsyncAdder.ambidextrous;
                case "WEAPONCATEGORYDV":
                    return objImprovementAsyncAdder.weaponcategorydv;
                case "WEAPONCATEGORYDICE":
                    return objImprovementAsyncAdder.weaponcategorydice;
                case "WEAPONSPECIFICDICE":
                    return objImprovementAsyncAdder.weaponspecificdice;
                case "WEAPONCATEGORYAP":
                    return objImprovementAsyncAdder.weaponcategoryap;
                case "WEAPONCATEGORYACCURACY":
                    return objImprovementAsyncAdder.weaponcategoryaccuracy;
                case "WEAPONCATEGORYREACH":
                    return objImprovementAsyncAdder.weaponcategoryreach;
                case "WEAPONSPECIFICDV":
                    return objImprovementAsyncAdder.weaponspecificdv;
                case "WEAPONSPECIFICAP":
                    return objImprovementAsyncAdder.weaponspecificap;
                case "WEAPONSPECIFICACCURACY":
                    return objImprovementAsyncAdder.weaponspecificaccuracy;
                case "WEAPONSPECIFICRANGE":
                    return objImprovementAsyncAdder.weaponspecificrange;
                case "SELECTMENTORSPIRIT":
                    return objImprovementAsyncAdder.selectmentorspirit;
                case "SELECTPARAGON":
                    return objImprovementAsyncAdder.selectparagon;
                case "SMARTLINK":
                    return objImprovementAsyncAdder.smartlink;
                case "ADAPSIN":
                    return objImprovementAsyncAdder.adapsin;
                case "SOFTWEAVE":
                    return objImprovementAsyncAdder.softweave;
                case "DISABLEBIOWARE":
                    return objImprovementAsyncAdder.disablebioware;
                case "DISABLECYBERWARE":
                    return objImprovementAsyncAdder.disablecyberware;
                case "DISABLEBIOWAREGRADE":
                    return objImprovementAsyncAdder.disablebiowaregrade;
                case "DISABLECYBERWAREGRADE":
                    return objImprovementAsyncAdder.disablecyberwaregrade;
                case "WALKMULTIPLIER":
                    return objImprovementAsyncAdder.walkmultiplier;
                case "RUNMULTIPLIER":
                    return objImprovementAsyncAdder.runmultiplier;
                case "SPRINTBONUS":
                    return objImprovementAsyncAdder.sprintbonus;
                case "FREEPOSITIVEQUALITIES":
                    return objImprovementAsyncAdder.freepositivequalities;
                case "FREENEGATIVEQUALITIES":
                    return objImprovementAsyncAdder.freenegativequalities;
                case "SELECTSIDE":
                    return objImprovementAsyncAdder.selectside;
                case "FREESPIRITPOWERPOINTS":
                    return objImprovementAsyncAdder.freespiritpowerpoints;
                case "ADEPTPOWERPOINTS":
                    return objImprovementAsyncAdder.adeptpowerpoints;
                case "SPECIFICPOWER":
                    return objImprovementAsyncAdder.specificpower;
                case "SELECTPOWERS":
                    return objImprovementAsyncAdder.selectpowers;
                case "ARMORENCUMBRANCEPENALTY":
                    return objImprovementAsyncAdder.armorencumbrancepenalty;
                case "ADDART":
                    return objImprovementAsyncAdder.addart;
                case "SELECTART":
                    return objImprovementAsyncAdder.selectart;
                case "ADDMETAMAGIC":
                    return objImprovementAsyncAdder.addmetamagic;
                case "SELECTMETAMAGIC":
                    return objImprovementAsyncAdder.selectmetamagic;
                case "ADDECHO":
                    return objImprovementAsyncAdder.addecho;
                case "SELECTECHO":
                    return objImprovementAsyncAdder.selectecho;
                case "SKILLWIRE":
                    return objImprovementAsyncAdder.skillwire;
                case "HARDWIRES":
                    return objImprovementAsyncAdder.hardwires;
                case "DAMAGERESISTANCE":
                    return objImprovementAsyncAdder.damageresistance;
                case "JUDGEINTENTIONS":
                    return objImprovementAsyncAdder.judgeintentions;
                case "JUDGEINTENTIONSOFFENSE":
                    return objImprovementAsyncAdder.judgeintentionsoffense;
                case "JUDGEINTENTIONSDEFENSE":
                    return objImprovementAsyncAdder.judgeintentionsdefense;
                case "COMPOSURE":
                    return objImprovementAsyncAdder.composure;
                case "LIFTANDCARRY":
                    return objImprovementAsyncAdder.liftandcarry;
                case "MEMORY":
                    return objImprovementAsyncAdder.memory;
                case "FATIGUERESIST":
                    return objImprovementAsyncAdder.fatigueresist;
                case "RADIATIONRESIST":
                    return objImprovementAsyncAdder.radiationresist;
                case "SONICRESIST":
                    return objImprovementAsyncAdder.sonicresist;
                case "TOXINCONTACTRESIST":
                    return objImprovementAsyncAdder.toxincontactresist;
                case "TOXININGESTIONRESIST":
                    return objImprovementAsyncAdder.toxiningestionresist;
                case "TOXININHALATIONRESIST":
                    return objImprovementAsyncAdder.toxininhalationresist;
                case "TOXININJECTIONRESIST":
                    return objImprovementAsyncAdder.toxininjectionresist;
                case "PATHOGENCONTACTRESIST":
                    return objImprovementAsyncAdder.pathogencontactresist;
                case "PATHOGENINGESTIONRESIST":
                    return objImprovementAsyncAdder.pathogeningestionresist;
                case "PATHOGENINHALATIONRESIST":
                    return objImprovementAsyncAdder.pathogeninhalationresist;
                case "PATHOGENINJECTIONRESIST":
                    return objImprovementAsyncAdder.pathogeninjectionresist;
                case "TOXINCONTACTIMMUNE":
                    return objImprovementAsyncAdder.toxincontactimmune;
                case "TOXININGESTIONIMMUNE":
                    return objImprovementAsyncAdder.toxiningestionimmune;
                case "TOXININHALATIONIMMUNE":
                    return objImprovementAsyncAdder.toxininhalationimmune;
                case "TOXININJECTIONIMMUNE":
                    return objImprovementAsyncAdder.toxininjectionimmune;
                case "PATHOGENCONTACTIMMUNE":
                    return objImprovementAsyncAdder.pathogencontactimmune;
                case "PATHOGENINGESTIONIMMUNE":
                    return objImprovementAsyncAdder.pathogeningestionimmune;
                case "PATHOGENINHALATIONIMMUNE":
                    return objImprovementAsyncAdder.pathogeninhalationimmune;
                case "PATHOGENINJECTIONIMMUNE":
                    return objImprovementAsyncAdder.pathogeninjectionimmune;
                case "PHYSIOLOGICALADDICTIONFIRSTTIME":
                    return objImprovementAsyncAdder.physiologicaladdictionfirsttime;
                case "PSYCHOLOGICALADDICTIONFIRSTTIME":
                    return objImprovementAsyncAdder.psychologicaladdictionfirsttime;
                case "PHYSIOLOGICALADDICTIONALREADYADDICTED":
                    return objImprovementAsyncAdder.physiologicaladdictionalreadyaddicted;
                case "PSYCHOLOGICALADDICTIONALREADYADDICTED":
                    return objImprovementAsyncAdder.psychologicaladdictionalreadyaddicted;
                case "STUNCMRECOVERY":
                    return objImprovementAsyncAdder.stuncmrecovery;
                case "PHYSICALCMRECOVERY":
                    return objImprovementAsyncAdder.physicalcmrecovery;
                case "ADDESSTOSTUNCMRECOVERY":
                    return objImprovementAsyncAdder.addesstostuncmrecovery;
                case "ADDESSTOPHYSICALCMRECOVERY":
                    return objImprovementAsyncAdder.addesstophysicalcmrecovery;
                case "CONCEALABILITY":
                    return objImprovementAsyncAdder.concealability;
                case "DRAINRESIST":
                    return objImprovementAsyncAdder.drainresist;
                case "DRAINVALUE":
                    return objImprovementAsyncAdder.drainvalue;
                case "FADINGRESIST":
                    return objImprovementAsyncAdder.fadingresist;
                case "FADINGVALUE":
                    return objImprovementAsyncAdder.fadingvalue;
                case "NOTORIETY":
                    return objImprovementAsyncAdder.notoriety;
                case "STREETCRED":
                    return objImprovementAsyncAdder.streetcred;
                case "STREETCREDMULTIPLIER":
                    return objImprovementAsyncAdder.streetcredmultiplier;
                case "COMPLEXFORMLIMIT":
                    return objImprovementAsyncAdder.complexformlimit;
                case "SPELLLIMIT":
                    return objImprovementAsyncAdder.spelllimit;
                case "FREESPELLS":
                    return objImprovementAsyncAdder.freespells;
                case "SPELLCATEGORY":
                    return objImprovementAsyncAdder.spellcategory;
                case "SPELLCATEGORYDICEPOOL":
                    return objImprovementAsyncAdder.spellcategorydicepool;
                case "SPELLDICEPOOL":
                    return objImprovementAsyncAdder.spelldicepool;
                case "SPELLCATEGORYDRAIN":
                    return objImprovementAsyncAdder.spellcategorydrain;
                case "SPELLCATEGORYDAMAGE":
                    return objImprovementAsyncAdder.spellcategorydamage;
                case "SPELLDESCRIPTORDAMAGE":
                    return objImprovementAsyncAdder.spelldescriptordamage;
                case "SPELLDESCRIPTORDRAIN":
                    return objImprovementAsyncAdder.spelldescriptordrain;
                case "THROWRANGE":
                    return objImprovementAsyncAdder.throwrange;
                case "THROWRANGESTR":
                    return objImprovementAsyncAdder.throwrangestr;
                case "THROWSTR":
                    return objImprovementAsyncAdder.throwstr;
                case "SKILLSOFTACCESS":
                    return objImprovementAsyncAdder.skillsoftaccess;
                case "QUICKENINGMETAMAGIC":
                    return objImprovementAsyncAdder.quickeningmetamagic;
                case "IGNORECMPENALTYSTUN":
                    return objImprovementAsyncAdder.ignorecmpenaltystun;
                case "IGNORECMPENALTYPHYSICAL":
                    return objImprovementAsyncAdder.ignorecmpenaltyphysical;
                case "CYBORGESSENCE":
                    return objImprovementAsyncAdder.cyborgessence;
                case "ESSENCEPENALTY":
                    return objImprovementAsyncAdder.essencepenalty;
                case "ESSENCEPENALTYT100":
                    return objImprovementAsyncAdder.essencepenaltyt100;
                case "ESSENCEPENALTYMAGONLYT100":
                    return objImprovementAsyncAdder.essencepenaltymagonlyt100;
                case "ESSENCEPENALTYRESONLYT100":
                    return objImprovementAsyncAdder.essencepenaltyresonlyt100;
                case "ESSENCEPENALTYDEPONLYT100":
                    return objImprovementAsyncAdder.essencepenaltydeponlyt100;
                case "SPECIALATTBURNMULTIPLIER":
                    return objImprovementAsyncAdder.specialattburnmultiplier;
                case "SPECIALATTTOTALBURNMULTIPLIER":
                    return objImprovementAsyncAdder.specialatttotalburnmultiplier;
                case "ESSENCEMAX":
                    return objImprovementAsyncAdder.essencemax;
                case "SELECTSPRITE":
                    return objImprovementAsyncAdder.selectsprite;
                case "BLACKMARKETDISCOUNT":
                    return objImprovementAsyncAdder.blackmarketdiscount;
                case "SELECTARMOR":
                    return objImprovementAsyncAdder.selectarmor;
                case "SELECTCYBERWARE":
                    return objImprovementAsyncAdder.selectcyberware;
                case "SELECTWEAPON":
                    return objImprovementAsyncAdder.selectweapon;
                case "OPTIONALPOWERS":
                    return objImprovementAsyncAdder.optionalpowers;
                case "CRITTERPOWERS":
                    return objImprovementAsyncAdder.critterpowers;
                case "CRITTERPOWERLEVELS":
                    return objImprovementAsyncAdder.critterpowerlevels;
                case "PUBLICAWARENESS":
                    return objImprovementAsyncAdder.publicawareness;
                case "DEALERCONNECTION":
                    return objImprovementAsyncAdder.dealerconnection;
                case "UNLOCKSKILLS":
                    return objImprovementAsyncAdder.unlockskills;
                case "ADDQUALITIES":
                    return objImprovementAsyncAdder.addqualities;
                case "SELECTQUALITY":
                    return objImprovementAsyncAdder.selectquality;
                case "ADDSKILLSPECIALIZATION":
                    return objImprovementAsyncAdder.addskillspecialization;
                case "ADDSKILLSPECIALIZATIONOPTION":
                    return objImprovementAsyncAdder.addskillspecializationoption;
                case "ALLOWSPELLRANGE":
                    return objImprovementAsyncAdder.allowspellrange;
                case "ALLOWSPELLCATEGORY":
                    return objImprovementAsyncAdder.allowspellcategory;
                case "LIMITSPELLRANGE":
                    return objImprovementAsyncAdder.limitspellrange;
                case "LIMITSPELLCATEGORY":
                    return objImprovementAsyncAdder.limitspellcategory;
                case "LIMITSPELLDESCRIPTOR":
                    return objImprovementAsyncAdder.limitspelldescriptor;
                case "BLOCKSPELLDESCRIPTOR":
                    return objImprovementAsyncAdder.blockspelldescriptor;
                case "ADDSPRITE":
                    return objImprovementAsyncAdder.addsprite;
                case "ADDSPIRIT":
                    return objImprovementAsyncAdder.addspirit;
                case "LIMITSPIRITCATEGORY":
                    return objImprovementAsyncAdder.limitspiritcategory;
                case "MOVEMENTREPLACE":
                    return objImprovementAsyncAdder.movementreplace;
                case "ADDLIMB":
                    return objImprovementAsyncAdder.addlimb;
                case "ATTRIBUTEKARMACOST":
                    return objImprovementAsyncAdder.attributekarmacost;
                case "ACTIVESKILLKARMACOST":
                    return objImprovementAsyncAdder.activeskillkarmacost;
                case "SKILLGROUPKARMACOST":
                    return objImprovementAsyncAdder.skillgroupkarmacost;
                case "KNOWLEDGESKILLKARMACOST":
                    return objImprovementAsyncAdder.knowledgeskillkarmacost;
                case "KNOWLEDGESKILLKARMACOSTMIN":
                    return objImprovementAsyncAdder.knowledgeskillkarmacostmin;
                case "SKILLENABLEMOVEMENT":
                    return objImprovementAsyncAdder.skillenablemovement;
                case "SKILLDISABLE":
                    return objImprovementAsyncAdder.skilldisable;
                case "SKILLGROUPDISABLE":
                    return objImprovementAsyncAdder.skillgroupdisable;
                case "SKILLGROUPDISABLECHOICE":
                    return objImprovementAsyncAdder.skillgroupdisablechoice;
                case "SKILLGROUPCATEGORYDISABLE":
                    return objImprovementAsyncAdder.skillgroupcategorydisable;
                case "SKILLGROUPCATEGORYKARMACOST":
                    return objImprovementAsyncAdder.skillgroupcategorykarmacost;
                case "SKILLCATEGORYKARMACOST":
                    return objImprovementAsyncAdder.skillcategorykarmacost;
                case "SKILLCATEGORYSPECIALIZATIONKARMACOST":
                    return objImprovementAsyncAdder.skillcategoryspecializationkarmacost;
                case "ATTRIBUTEPOINTCOST":
                    return objImprovementAsyncAdder.attributepointcost;
                case "ACTIVESKILLPOINTCOST":
                    return objImprovementAsyncAdder.activeskillpointcost;
                case "SKILLGROUPPOINTCOST":
                    return objImprovementAsyncAdder.skillgrouppointcost;
                case "KNOWLEDGESKILLPOINTCOST":
                    return objImprovementAsyncAdder.knowledgeskillpointcost;
                case "SKILLGROUPCATEGORYPOINTCOST":
                    return objImprovementAsyncAdder.skillgroupcategorypointcost;
                case "SKILLCATEGORYPOINTCOST":
                    return objImprovementAsyncAdder.skillcategorypointcost;
                case "NEWSPELLKARMACOST":
                    return objImprovementAsyncAdder.newspellkarmacost;
                case "NEWCOMPLEXFORMKARMACOST":
                    return objImprovementAsyncAdder.newcomplexformkarmacost;
                case "NEWAIPROGRAMKARMACOST":
                    return objImprovementAsyncAdder.newaiprogramkarmacost;
                case "NEWAIADVANCEDPROGRAMKARMACOST":
                    return objImprovementAsyncAdder.newaiadvancedprogramkarmacost;
                case "ATTRIBUTEKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.attributekarmacostmultiplier;
                case "ACTIVESKILLKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.activeskillkarmacostmultiplier;
                case "SKILLGROUPKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillgroupkarmacostmultiplier;
                case "KNOWLEDGESKILLKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.knowledgeskillkarmacostmultiplier;
                case "SKILLGROUPCATEGORYKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillgroupcategorykarmacostmultiplier;
                case "SKILLCATEGORYKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillcategorykarmacostmultiplier;
                case "SKILLCATEGORYSPECIALIZATIONKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillcategoryspecializationkarmacostmultiplier;
                case "ATTRIBUTEPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.attributepointcostmultiplier;
                case "ACTIVESKILLPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.activeskillpointcostmultiplier;
                case "SKILLGROUPPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillgrouppointcostmultiplier;
                case "KNOWLEDGESKILLPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.knowledgeskillpointcostmultiplier;
                case "SKILLGROUPCATEGORYPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillgroupcategorypointcostmultiplier;
                case "SKILLCATEGORYPOINTCOSTMULTIPLIER":
                    return objImprovementAsyncAdder.skillcategorypointcostmultiplier;
                case "NEWSPELLKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.newspellkarmacostmultiplier;
                case "NEWCOMPLEXFORMKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.newcomplexformkarmacostmultiplier;
                case "NEWAIPROGRAMKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.newaiprogramkarmacostmultiplier;
                case "NEWAIADVANCEDPROGRAMKARMACOSTMULTIPLIER":
                    return objImprovementAsyncAdder.newaiadvancedprogramkarmacostmultiplier;
                case "BLOCKSKILLSPECIALIZATIONS":
                    return objImprovementAsyncAdder.blockskillspecializations;
                case "BLOCKSKILLCATEGORYSPECIALIZATIONS":
                    return objImprovementAsyncAdder.blockskillcategoryspecializations;
                case "FOCUSBINDINGKARMACOST":
                    return objImprovementAsyncAdder.focusbindingkarmacost;
                case "FOCUSBINDINGKARMAMULTIPLIER":
                    return objImprovementAsyncAdder.focusbindingkarmamultiplier;
                case "MAGICIANSWAYDISCOUNT":
                    return objImprovementAsyncAdder.magicianswaydiscount;
                case "BURNOUTSWAY":
                    return objImprovementAsyncAdder.burnoutsway;
                case "ADDWARE":
                    return objImprovementAsyncAdder.addware;
                case "WEAPONACCURACY":
                    return objImprovementAsyncAdder.weaponaccuracy;
                case "WEAPONRANGEMODIFIER":
                    return objImprovementAsyncAdder.weaponrangemodifier;
                case "WEAPONSKILLACCURACY":
                    return objImprovementAsyncAdder.weaponskillaccuracy;
                case "METAGENICLIMIT":
                    return objImprovementAsyncAdder.metageniclimit;
                case "SPECIALMODIFICATIONLIMIT":
                    return objImprovementAsyncAdder.specialmodificationlimit;
                case "CYBERADEPTDAEMON":
                    return objImprovementAsyncAdder.cyberadeptdaemon;
                case "ACTIONDICEPOOL":
                    return objImprovementAsyncAdder.actiondicepool;
                case "CONTACTKARMA":
                    return objImprovementAsyncAdder.contactkarma;
                case "CONTACTKARMAMINIMUM":
                    return objImprovementAsyncAdder.contactkarmaminimum;
                case "ALLOWSPRITEFETTERING":
                    return objImprovementAsyncAdder.allowspritefettering;
                case "ENABLECYBERZOMBIE":
                    return objImprovementAsyncAdder.enablecyberzombie;
                case "ALLOWCRITTERPOWERCATEGORY":
                    return objImprovementAsyncAdder.allowcritterpowercategory;
                case "LIMITCRITTERPOWERCATEGORY":
                    return objImprovementAsyncAdder.limitcritterpowercategory;
                case "ATTRIBUTEMAXCLAMP":
                    return objImprovementAsyncAdder.attributemaxclamp;
                case "METAMAGICLIMIT":
                    return objImprovementAsyncAdder.metamagiclimit;
                case "DISABLEQUALITY":
                    return objImprovementAsyncAdder.disablequality;
                case "FREEQUALITY":
                    return objImprovementAsyncAdder.freequality;
                case "SELECTEXPERTISE":
                    return objImprovementAsyncAdder.selectexpertise;
                case "PENALTYFREESUSTAIN":
                    return objImprovementAsyncAdder.penaltyfreesustain;
                case "REPLACESKILLSPELL":
                    return objImprovementAsyncAdder.replaceskillspell;
                case "QUALITYLEVEL":
                    return objImprovementAsyncAdder.qualitylevel;
                case "SELECTTEXT":
                    return AddImprovementAsyncCollection.selecttext;
                // No method matches, return a null pointer
                default:
                    return null;
            }
        }
    }
}
